AWSTemplateFormatVersion: '2010-09-09'

Description: 'Wordpress: fault tolerant and scalable, a cloudonaut.io template'

Metadata:

  'AWS::CloudFormation::Interface':

    ParameterGroups:

    - Label:

        default: 'Parent Stacks'

      Parameters:

      - ParentVPCStack

      - ParentSSHBastionStack

      - ParentAuthProxyStack

    - Label:

        default: 'Wordpress Parameters'

      Parameters:

      - BlogID

      - BlogTitle

      - BlogAdminUsername

      - BlogAdminPassword

      - BlogAdminEMail

    - Label:

        default: 'EC2 Parameters'

      Parameters:

      - WebServerKeyName

      - WebServerIAMUserSSHAccess

      - WebServerInstanceType

      - WebServerLogsRetentionInDays

      - NewRelicLicenseKey

    - Label:

        default: 'Database Parameters'

      Parameters:

      - DBServerInstanceType

Parameters:

  ParentVPCStack:

    Description: 'Stack name of parent VPC stack based on vpc/vpc-*azs.yaml template.'

    Type: String

  ParentSSHBastionStack:

    Description: 'Optional Stack name of parent SSH bastion host/instance stack based on vpc/vpc-ssh-bastion.yaml template.'

    Type: String

    Default: ''

  ParentAuthProxyStack:

    Description: 'Optional Stack name of parent auth proxy stack based on security/auth-proxy-*.yaml template.'

    Type: String

    Default: ''

  BlogID:

    Description: 'A unique identifier for your blog. For internal use only.'

    Type: String

    ConstraintDescription: 'Only allows [a-z0-9\-] and must not be longer than 32'

    AllowedPattern: '[a-z0-9\-]+'

    MaxLength: 32

  BlogTitle:

    Description: 'The title of the Wordpress blog.'

    Type: String

    Default: 'Just another Wordpress blog'

  BlogAdminUsername:

    Description: 'A username for the Wordpress admin.'

    Type: String

    Default: admin

  BlogAdminPassword:

    Description: 'A password for the Wordpress admin.'

    Type: String

    NoEcho: true

  BlogAdminEMail:

    Description: 'The email address of the Wordpress admin.'

    Type: String

  WebServerKeyName:

    Description: 'Optional key pair of the ec2-user to establish a SSH connection to the web server.'

    Type: String

    Default: ''

  WebServerIAMUserSSHAccess:

    Description: 'Synchronize public keys of IAM users to enable personalized SSH access (Doc: https://cloudonaut.io/manage-aws-ec2-ssh-access-with-iam/).'

    Type: String

    Default: false

    AllowedValues:

    - true

    - false

  WebServerInstanceType:

    Description: 'The instance type of web servers (e.g. t2.micro).'

    Type: String

    Default: 't2.micro'

  WebServerLogsRetentionInDays:

    Description: 'Specifies the number of days you want to retain log events.'

    Type: Number

    Default: 14

    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]

  DBServerInstanceType:

    Description: 'The instance type of database server (e.g. db.t2.micro).'

    Type: String

    Default: 'db.t2.micro'

  NewRelicLicenseKey:

    Description: 'Optional New Relic License Key will install the New Relic Servers for Linux agent.'

    Type: String

    Default: ''

    NoEcho: true

Mappings:

  RegionMap:

    'ap-south-1':

      AMI: 'ami-cacbbea5'

    'eu-west-1':

      AMI: 'ami-d41d58a7'

    'ap-northeast-2':

      AMI: 'ami-a04297ce'

    'ap-northeast-1':

      AMI: 'ami-1a15c77b'

    'sa-east-1':

      AMI: 'ami-b777e4db'

    'ap-southeast-1':

      AMI: 'ami-7243e611'

    'ap-southeast-2':

      AMI: 'ami-55d4e436'

    'eu-central-1':

      AMI: 'ami-0044b96f'

    'us-east-1':

      AMI: 'ami-c481fad3'

    'us-east-2':

      AMI: 'ami-71ca9114'

    'us-west-1':

      AMI: 'ami-de347abe'

    'us-west-2':

      AMI: 'ami-b04e92d0'

Conditions:

  HasKeyName: !Not [!Equals [!Ref WebServerKeyName, '']]

  HasIAMUserSSHAccess: !Equals [!Ref WebServerIAMUserSSHAccess, 'true']

  HasSSHBastionSecurityGroup: !Not [!Equals [!Ref ParentSSHBastionStack, '']]

  HasAuthProxySecurityGroup: !Not [!Equals [!Ref ParentAuthProxyStack, '']]

  HasNotAuthProxySecurityGroup: !Equals [!Ref ParentAuthProxyStack, '']

  HasNewRelic: !Not [!Equals [!Ref NewRelicLicenseKey, '']]

Resources:

  WebServerLogs:

    Type: 'AWS::Logs::LogGroup'

    Properties:

      RetentionInDays: !Ref WebServerLogsRetentionInDays

  LoadBalancerSecurityGroup:

    Type: 'AWS::EC2::SecurityGroup'

    Properties:

      GroupDescription: 'wordpress-elb'

      VpcId:

        'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'

  LoadBalancerSecurityGroupInWorld:

    Type: 'AWS::EC2::SecurityGroupIngress'

    Condition: HasNotAuthProxySecurityGroup

    Properties:

      GroupId: !Ref LoadBalancerSecurityGroup

      IpProtocol: tcp

      FromPort: 80

      ToPort: 80

      CidrIp: '0.0.0.0/0'

  LoadBalancerSecurityGroupInAuthProxy:

    Type: 'AWS::EC2::SecurityGroupIngress'

    Condition: HasAuthProxySecurityGroup

    Properties:

      GroupId: !Ref LoadBalancerSecurityGroup

      IpProtocol: tcp

      FromPort: 80

      ToPort: 80

      SourceSecurityGroupId:

        'Fn::ImportValue': !Sub '${ParentAuthProxyStack}-SecurityGroup'

  WebServerSecurityGroup:

    Type: 'AWS::EC2::SecurityGroup'

    Properties:

      GroupDescription: 'wordpress-ec2'

      VpcId:

        'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'

      SecurityGroupIngress:

      - FromPort: 80

        IpProtocol: tcp

        SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup

        ToPort: 80

  WebServerSecurityGroupInSSHBastion:

    Type: 'AWS::EC2::SecurityGroupIngress'

    Condition: HasSSHBastionSecurityGroup

    Properties:

      GroupId: !Ref WebServerSecurityGroup

      IpProtocol: tcp

      FromPort: 22

      ToPort: 22

      SourceSecurityGroupId:

        'Fn::ImportValue': !Sub '${ParentSSHBastionStack}-SecurityGroup'

  DatabaseSecurityGroup:

    Type: 'AWS::EC2::SecurityGroup'

    Properties:

      GroupDescription: 'wordpress-rds'

      VpcId:

        'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'

      SecurityGroupIngress:

      - IpProtocol: tcp

        FromPort: 3306

        ToPort: 3306

        SourceSecurityGroupId: !Ref WebServerSecurityGroup

  LoadBalancer:

    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'

    Properties:

      Subnets:

      - 'Fn::ImportValue': !Sub '${ParentVPCStack}-SubnetAPublic'

      - 'Fn::ImportValue': !Sub '${ParentVPCStack}-SubnetBPublic'

      LoadBalancerName: !Ref BlogID

      Listeners:

      - InstancePort: 80

        InstanceProtocol: HTTP

        LoadBalancerPort: 80

        Protocol: HTTP

      HealthCheck:

        HealthyThreshold: 2

        Interval: 5

        Target: 'TCP:80'

        Timeout: 3

        UnhealthyThreshold: 2

      SecurityGroups:

      - !Ref LoadBalancerSecurityGroup

      Scheme: 'internet-facing'

      CrossZone: true

  DBSubnetGroup:

    Type: 'AWS::RDS::DBSubnetGroup'

    Properties:

      DBSubnetGroupDescription: 'DB subnet group'

      SubnetIds:

      - 'Fn::ImportValue': !Sub '${ParentVPCStack}-SubnetAPrivate'

      - 'Fn::ImportValue': !Sub '${ParentVPCStack}-SubnetBPrivate'

  Database:

    Type: 'AWS::RDS::DBInstance'

    Properties:

      AllocatedStorage: 5

      BackupRetentionPeriod: 0

      DBInstanceClass: !Ref DBServerInstanceType

      DBInstanceIdentifier: !Ref BlogID

      DBName: wordpress

      Engine: MySQL

      MasterUsername: wordpress

      MasterUserPassword: wordpress

      VPCSecurityGroups:

      - !Ref DatabaseSecurityGroup

      DBSubnetGroupName: !Ref DBSubnetGroup

      MultiAZ: true

      StorageType: gp2

  S3Bucket:

    Type: 'AWS::S3::Bucket'

    Properties:

      BucketName: !Ref BlogID

  WebServerInstanceProfile:

    Type: 'AWS::IAM::InstanceProfile'

    Properties:

      Path: '/'

      Roles:

      - !Ref WebServerIAMRole

  WebServerIAMRole:

    Type: 'AWS::IAM::Role'

    Properties:

      AssumeRolePolicyDocument:

        Version: '2012-10-17'

        Statement:

        - Effect: Allow

          Principal:

            Service:

            - 'ec2.amazonaws.com'

          Action:

          - 'sts:AssumeRole'

      Path: '/'

      Policies:

      - PolicyName: s3

        PolicyDocument:

          Version: '2012-10-17'

          Statement:

          - Effect: Allow

            Action:

            - 's3:*'

            Resource:

            - !Sub 'arn:aws:s3:::${BlogID}/*'

      - PolicyName: logs

        PolicyDocument:

          Version: '2012-10-17'

          Statement:

          - Effect: Allow

            Action:

            - 'logs:CreateLogGroup'

            - 'logs:CreateLogStream'

            - 'logs:PutLogEvents'

            - 'logs:DescribeLogStreams'

            Resource:

            - 'arn:aws:logs:*:*:*'

  WebServerIAMPolicySSHAccess:

    Type: 'AWS::IAM::Policy'

    Condition: HasIAMUserSSHAccess

    Properties:

      Roles:

      - !Ref WebServerIAMRole

      PolicyName: iam

      PolicyDocument:

        Version: '2012-10-17'

        Statement:

        - Effect: Allow

          Action:

          - 'iam:ListUsers'

          Resource:

          - '*'

        - Effect: Allow

          Action:

          - 'iam:ListSSHPublicKeys'

          - 'iam:GetSSHPublicKey'

          Resource:

          - !Sub 'arn:aws:iam::${AWS::AccountId}:user/*'

  LaunchConfiguration:

    Type: 'AWS::AutoScaling::LaunchConfiguration'

    Metadata:

      'AWS::CloudFormation::Init':

        configSets:

          default:

            !If

            - HasNewRelic

            - !If [HasIAMUserSSHAccess, [ssh-access, newrelic, config], [newrelic, config]]

            - !If [HasIAMUserSSHAccess, [ssh-access, config], [config]]

        newrelic:

          packages:

            rpm:

              newrelic-sysmond: 'https://download.newrelic.com/pub/newrelic/el5/x86_64/newrelic-sysmond-2.3.0.132-1.x86_64.rpm'

          files:

            '/etc/newrelic/nrsysmond.cfg':

              content: !Sub |

                license_key=${NewRelicLicenseKey}

                loglevel=info

                logfile=/var/log/newrelic/nrsysmond.log

                labels=StackName:${AWS::StackName};AccountId:${AWS::AccountId};Region:${AWS::Region}

              mode: '000640'

              owner: root

              group: newrelic

          services:

            sysvinit:

              newrelic-sysmond:

                enabled: true

                ensureRunning: true

                files:

                - '/etc/newrelic/nrsysmond.cfg'

        ssh-access:

          files:

            '/opt/authorized_keys_command.sh':

              content: !Sub |

                #!/bin/bash -e

                if [ -z "$1" ]; then

                  exit 1

                fi

                aws iam list-ssh-public-keys --user-name "$1" --query "SSHPublicKeys[?Status == 'Active'].[SSHPublicKeyId]" --output text | while read KeyId;

                do

                  aws iam get-ssh-public-key --user-name "$1" --ssh-public-key-id "$KeyId" --encoding SSH --query "SSHPublicKey.SSHPublicKeyBody" --output text

                done

              mode: '000755'

              owner: root

              group: root

            '/opt/import_users.sh':

              content: !Sub |

                #!/bin/bash

                aws iam list-users --query "Users[].[UserName]" --output text | while read User; do

                  if id -u "$User" >/dev/null 2>&1; then

                    echo "$User exists"

                  else

                    /usr/sbin/adduser "$User"

                    echo "$User ALL=(ALL) NOPASSWD:ALL" > "/etc/sudoers.d/$User"

                  fi

                done

              mode: '000755'

              owner: root

              group: root

            '/etc/cron.d/import_users':

              content: |

                */10 * * * * root /opt/import_users.sh

              mode: '000644'

              owner: root

              group: root

          commands:

            'a_configure_sshd_command':

              command: 'sed -i "s:#AuthorizedKeysCommand none:AuthorizedKeysCommand /opt/authorized_keys_command.sh:g" /etc/ssh/sshd_config'

            'b_configure_sshd_commanduser':

              command: 'sed -i "s:#AuthorizedKeysCommandUser nobody:AuthorizedKeysCommandUser nobody:g" /etc/ssh/sshd_config'

            'c_import_users':

              command: './import_users.sh'

              cwd: '/opt'

          services:

            sysvinit:

              sshd:

                enabled: true

                ensureRunning: true

                commands:

                - 'a_configure_sshd_command'

                - 'b_configure_sshd_commanduser'

        config:

          packages:

            yum:

              php: []

              php-mysql: []

              mysql: []

              httpd: []

              awslogs: []

          sources:

            '/var/www/html': 'https://wordpress.org/wordpress-4.6.1.tar.gz'

          files:

            '/root/config.sh':

              content: !Sub |

                #!/bin/bash -ex

                cp wp-config-sample.php wp-config.php

                sed -i "s/'database_name_here'/'wordpress'/g" wp-config.php

                sed -i "s/'username_here'/'wordpress'/g" wp-config.php

                sed -i "s/'password_here'/'wordpress'/g" wp-config.php

                sed -i "s/'localhost'/'${Database.Endpoint.Address}'/g" wp-config.php

                echo "define('AWS_USE_EC2_IAM_ROLE', true);" >> wp-config.php

                echo "define('DISALLOW_FILE_MODS', true);" >> wp-config.php

                echo "define('WP_AUTO_UPDATE_CORE', false);" >> wp-config.php

                chmod -R 777 wp-content/

                curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar

                php wp-cli.phar core install --url='${LoadBalancer.DNSName}' --title='${BlogTitle}' --admin_user='${BlogAdminUsername}' --admin_password='${BlogAdminPassword}' --admin_email='${BlogAdminEMail}'

                php wp-cli.phar plugin install --activate --version=1.0 amazon-web-services

                php wp-cli.phar plugin install --activate --version=1.1 amazon-s3-and-cloudfront

                CHARCOUNT=`printf '${BlogID}' | wc -c`

                php wp-cli.phar db query "DELETE FROM wp_options WHERE option_name = 'tantan_wordpress_s3'; INSERT INTO wp_options (option_name, option_value, autoload) VALUES('tantan_wordpress_s3', 'a:15:{s:17:\"post_meta_version\";i:1;s:6:\"bucket\";s:$CHARCOUNT:\"${BlogID}\";s:6:\"region\";s:0:\"\";s:6:\"domain\";s:9:\"subdomain\";s:7:\"expires\";s:1:\"0\";s:10:\"cloudfront\";s:0:\"\";s:13:\"object-prefix\";s:19:\"wp-content/uploads/\";s:10:\"copy-to-s3\";s:1:\"1\";s:13:\"serve-from-s3\";s:1:\"1\";s:17:\"remove-local-file\";s:1:\"0\";s:3:\"ssl\";s:7:\"request\";s:12:\"hidpi-images\";s:1:\"0\";s:17:\"object-versioning\";s:1:\"0\";s:21:\"use-yearmonth-folders\";s:1:\"1\";s:20:\"enable-object-prefix\";s:1:\"1\";}', 'yes');"

              mode: '000500'

              owner: root

              group: root

            '/etc/awslogs/awscli.conf':

              content: !Sub |

                [default]

                region = ${AWS::Region}

                [plugins]

                cwlogs = cwlogs

              mode: '000644'

              owner: root

              group: root

            '/etc/awslogs/awslogs.conf':

              content: !Sub |

                [general]

                state_file = /var/lib/awslogs/agent-state

                [/var/log/messages]

                datetime_format = %b %d %H:%M:%S

                file = /var/log/messages

                log_stream_name = {instance_id}/var/log/messages

                log_group_name = ${WebServerLogs}

                [/var/log/secure]

                datetime_format = %b %d %H:%M:%S

                file = /var/log/secure

                log_stream_name = {instance_id}/var/log/secure

                log_group_name = ${WebServerLogs}

                [/var/log/cron]

                datetime_format = %b %d %H:%M:%S

                file = /var/log/cron

                log_stream_name = {instance_id}/var/log/cron

                log_group_name = ${WebServerLogs}

                [/var/log/cloud-init.log]

                datetime_format = %b %d %H:%M:%S

                file = /var/log/cloud-init.log

                log_stream_name = {instance_id}/var/log/cloud-init.log

                log_group_name = ${WebServerLogs}

                [/var/log/cfn-init.log]

                datetime_format = %Y-%m-%d %H:%M:%S

                file = /var/log/cfn-init.log

                log_stream_name = {instance_id}/var/log/cfn-init.log

                log_group_name = ${WebServerLogs}

                [/var/log/cfn-hup.log]

                datetime_format = %Y-%m-%d %H:%M:%S

                file = /var/log/cfn-hup.log

                log_stream_name = {instance_id}/var/log/cfn-hup.log

                log_group_name = ${WebServerLogs}

                [/var/log/cfn-init-cmd.log]

                datetime_format = %Y-%m-%d %H:%M:%S

                file = /var/log/cfn-init-cmd.log

                log_stream_name = {instance_id}/var/log/cfn-init-cmd.log

                log_group_name = ${WebServerLogs}

                [/var/log/cloud-init-output.log]

                file = /var/log/cloud-init-output.log

                log_stream_name = {instance_id}/var/log/cloud-init-output.log

                log_group_name = ${WebServerLogs}

                [/var/log/dmesg]

                file = /var/log/dmesg

                log_stream_name = {instance_id}/var/log/dmesg

                log_group_name = ${WebServerLogs}

                [/var/log/httpd/access_log]

                datetime_format = %b %d %H:%M:%S %Y

                file = /var/log/httpd/access_log

                log_stream_name = {instance_id}/var/log/httpd/access_log

                log_group_name = ${WebServerLogs}

                [/var/log/httpd/error_log]

                datetime_format = %d/%b/%Y:%H:%M:%S %z

                file = /var/log/httpd/error_log

                log_stream_name = {instance_id}/var/log/httpd/error_log

                log_group_name = ${WebServerLogs}

              mode: '000644'

              owner: root

              group: root

          commands:

            01_mv:

              command: 'mv * ../'

              cwd: '/var/www/html/wordpress'

            02_config:

              command: '/root/config.sh'

              cwd: '/var/www/html'

          services:

            sysvinit:

              httpd:

                enabled: true

                ensureRunning: true

              awslogs:

                enabled: true

                ensureRunning: true

                packages:

                  yum:

                  - awslogs

                files:

                - '/etc/awslogs/awslogs.conf'

                - '/etc/awslogs/awscli.conf'

    Properties:

      AssociatePublicIpAddress: true

      IamInstanceProfile: !Ref WebServerInstanceProfile

      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]

      InstanceType: !Ref WebServerInstanceType

      SecurityGroups:

      - !Ref WebServerSecurityGroup

      KeyName: !If [HasKeyName, !Ref WebServerKeyName, !Ref 'AWS::NoValue']

      UserData:

        'Fn::Base64': !Sub |

          #!/bin/bash -x

          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfiguration --region ${AWS::Region}

          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}

  AutoScalingGroup:

    Type: 'AWS::AutoScaling::AutoScalingGroup'

    Properties:

      LoadBalancerNames:

      - !Ref LoadBalancer

      LaunchConfigurationName: !Ref LaunchConfiguration

      MinSize: 2

      MaxSize: 4

      DesiredCapacity: 2

      Cooldown: 60

      HealthCheckGracePeriod: 120

      HealthCheckType: ELB

      VPCZoneIdentifier:

      - 'Fn::ImportValue': !Sub '${ParentVPCStack}-SubnetAPublic'

      - 'Fn::ImportValue': !Sub '${ParentVPCStack}-SubnetBPublic'

      Tags:

      - PropagateAtLaunch: true

        Value: wordpress

        Key: Name

    CreationPolicy:

      ResourceSignal:

        Timeout: PT10M

    UpdatePolicy:

      AutoScalingRollingUpdate:

        PauseTime: PT10M

        WaitOnResourceSignals: true

  ScalingUpPolicy:

    Type: 'AWS::AutoScaling::ScalingPolicy'

    Properties:

      AdjustmentType: PercentChangeInCapacity

      MinAdjustmentStep: 1

      AutoScalingGroupName: !Ref AutoScalingGroup

      Cooldown: 300

      ScalingAdjustment: 25

  CPUHighAlarm:

    Type: 'AWS::CloudWatch::Alarm'

    Properties:

      EvaluationPeriods: 1

      Statistic: Average

      Threshold: 75

      AlarmDescription: 'Alarm if CPU load is high.'

      Period: 60

      AlarmActions:

      - !Ref ScalingUpPolicy

      Namespace: 'AWS/EC2'

      Dimensions:

      - Name: AutoScalingGroupName

        Value: !Ref AutoScalingGroup

      ComparisonOperator: GreaterThanThreshold

      MetricName: CPUUtilization

  ScalingDownPolicy:

    Type: 'AWS::AutoScaling::ScalingPolicy'

    Properties:

      AdjustmentType: PercentChangeInCapacity

      MinAdjustmentStep: 1

      AutoScalingGroupName: !Ref AutoScalingGroup

      Cooldown: 300

      ScalingAdjustment: -25

  CPULowAlarm:

    Type: 'AWS::CloudWatch::Alarm'

    Properties:

      EvaluationPeriods: 1

      Statistic: Average

      Threshold: 25

      AlarmDescription: 'Alarm if CPU load is low.'

      Period: 60

      AlarmActions:

      - !Ref ScalingDownPolicy

      Namespace: 'AWS/EC2'

      Dimensions:

      - Name: AutoScalingGroupName

        Value: !Ref AutoScalingGroup

      ComparisonOperator: LessThanThreshold

      MetricName: CPUUtilization

Outputs:

  DNSName:

    Description: 'The DNS name for the Wordpress load balancer.'

    Value: !Sub '${LoadBalancer.DNSName}'

    Export:

      Name: !Sub '${AWS::StackName}-DNSName'

  URL:

    Description: 'URL to Wordpress'

    Value: !Sub 'http://${LoadBalancer.DNSName}'

    Export:

      Name: !Sub '${AWS::StackName}-URL'